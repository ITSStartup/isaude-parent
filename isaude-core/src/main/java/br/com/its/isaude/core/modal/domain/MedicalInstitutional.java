package br.com.its.isaude.core.modal.domain;

// Generated 21/11/2013 15:00:51 by Hibernate Tools 4.0.0

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import org.codehaus.jackson.annotate.JsonIgnore;
import org.hibernate.validator.constraints.br.CNPJ;

/**
 * InstituicaoMedica generated by hbm2java
 */
@Entity
@Table(name = "INSTITUICAO_MEDICA")
public class MedicalInstitutional implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -4637365955190772684L;
	private Long id;
	private String nomeFantasia;
	private String razaoSocial;
	private String cnpj;
	private Set<AgendaDoctor> agendaMedicos = new HashSet<AgendaDoctor>();
	private Set<Doctor> medicos = new HashSet<Doctor>();

	public MedicalInstitutional() {
	}

	public MedicalInstitutional(String nomeFantasia, String razaoSocial,
			String cnpj, Set<AgendaDoctor> agendaMedicos, Set<Doctor> medicos) {
		this.nomeFantasia = nomeFantasia;
		this.razaoSocial = razaoSocial;
		this.cnpj = cnpj;
		this.agendaMedicos = agendaMedicos;
		this.medicos = medicos;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "ID", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}
	@NotNull
	@Column(name = "NOME_FANTASIA", length = 80)
	public String getNomeFantasia() {
		return this.nomeFantasia;
	}

	public void setNomeFantasia(String nomeFantasia) {
		this.nomeFantasia = nomeFantasia;
	}
	@NotNull
	@Column(name = "RAZAO_SOCIAL", length = 45,unique=true)
	public String getRazaoSocial() {
		return this.razaoSocial;
	}

	public void setRazaoSocial(String razaoSocial) {
		this.razaoSocial = razaoSocial;
	}
	@NotNull
	@CNPJ
	@Column(name = "CNPJ", unique=true)
	public String getCnpj() {
		return this.cnpj;
	}

	public void setCnpj(String cnpj) {
		this.cnpj = cnpj;
	}
	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "instituicaoMedica")
	public Set<AgendaDoctor> getAgendaMedicos() {
		return this.agendaMedicos;
	}
	
	public void setAgendaMedicos(Set<AgendaDoctor> agendaMedicos) {
		this.agendaMedicos = agendaMedicos;
	}
	@JsonIgnore
	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "INSTITUICAO_MEDICA_has_MEDICO", 
	joinColumns = { @JoinColumn(name = "INSTITUICAO_MEDICA_ID", nullable = false, updatable = false) },
	inverseJoinColumns = { @JoinColumn(name = "MEDICO_ID", nullable = false, updatable = false) })
	public Set<Doctor> getMedicos() {
		return this.medicos;
	}

	public void setMedicos(Set<Doctor> medicos) {
		this.medicos = medicos;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((cnpj == null) ? 0 : cnpj.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result
				+ ((nomeFantasia == null) ? 0 : nomeFantasia.hashCode());
		result = prime * result
				+ ((razaoSocial == null) ? 0 : razaoSocial.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof MedicalInstitutional))
			return false;
		MedicalInstitutional other = (MedicalInstitutional) obj;
		if (cnpj == null) {
			if (other.cnpj != null)
				return false;
		} else if (!cnpj.equals(other.cnpj))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (nomeFantasia == null) {
			if (other.nomeFantasia != null)
				return false;
		} else if (!nomeFantasia.equals(other.nomeFantasia))
			return false;
		if (razaoSocial == null) {
			if (other.razaoSocial != null)
				return false;
		} else if (!razaoSocial.equals(other.razaoSocial))
			return false;
		return true;
	}
	

}
