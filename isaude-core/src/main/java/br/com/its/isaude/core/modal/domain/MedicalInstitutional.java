package br.com.its.isaude.core.modal.domain;

// Generated 09/12/2013 22:31:28 by Hibernate Tools 4.0.0
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import org.codehaus.jackson.annotate.JsonIgnore;
import org.hibernate.validator.constraints.br.CNPJ;

/**
 * InstituicaoMedica generated by hbm2java
 */
@Entity
@Table(name = "INSTITUICAO_MEDICA", uniqueConstraints = @UniqueConstraint(columnNames = "CNPJ"))
public class MedicalInstitutional implements java.io.Serializable {

    private Long id;
    private String nomeFantasia;
    private String razaoSocial;
    private String cnpj;
    private Set<Doctor> medicos = new HashSet<Doctor>();
    private Set<WorktimeDoctor> expedienteMedicos = new HashSet<WorktimeDoctor>();

    public MedicalInstitutional() {
    }

    public MedicalInstitutional(String nomeFantasia, String razaoSocial, String cnpj) {
        this.nomeFantasia = nomeFantasia;
        this.razaoSocial = razaoSocial;
        this.cnpj = cnpj;
    }

    public MedicalInstitutional(String nomeFantasia, String razaoSocial, String cnpj, Set<Doctor> medicos, Set<WorktimeDoctor> expedienteMedicos) {
        this.nomeFantasia = nomeFantasia;
        this.razaoSocial = razaoSocial;
        this.cnpj = cnpj;
        this.medicos = medicos;
        this.expedienteMedicos = expedienteMedicos;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "ID", unique = true, nullable = false)
    public Long getId() {
        return this.id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    @Column(name = "NOME_FANTASIA", nullable = false, length = 80)
    public String getNomeFantasia() {
        return this.nomeFantasia;
    }

    public void setNomeFantasia(String nomeFantasia) {
        this.nomeFantasia = nomeFantasia;
    }

    @NotNull
    @Column(name = "RAZAO_SOCIAL", nullable = false, length = 45)
    public String getRazaoSocial() {
        return this.razaoSocial;
    }

    public void setRazaoSocial(String razaoSocial) {
        this.razaoSocial = razaoSocial;
    }

    @CNPJ
    @NotNull
    @Column(name = "CNPJ", unique = true, nullable = false, length = 30)
    public String getCnpj() {
        return this.cnpj;
    }

    public void setCnpj(String cnpj) {
        this.cnpj = cnpj;
    }

    @JsonIgnore
    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "INSTITUICAO_MEDICA_HAS_MEDICO", joinColumns = {
        @JoinColumn(name = "INSTITUICAO_MEDICA_ID", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "MEDICO_ID", nullable = false, updatable = false)})
    public Set<Doctor> getMedicos() {
        return this.medicos;
    }

    public void setMedicos(Set<Doctor> medicos) {
        this.medicos = medicos;
    }

    @JsonIgnore
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "instituicaoMedica")
    public Set<WorktimeDoctor> getExpedienteMedicos() {
        return this.expedienteMedicos;
    }

    public void setExpedienteMedicos(Set<WorktimeDoctor> expedienteMedicos) {
        this.expedienteMedicos = expedienteMedicos;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 47 * hash + (this.id != null ? this.id.hashCode() : 0);
        hash = 47 * hash + (this.nomeFantasia != null ? this.nomeFantasia.hashCode() : 0);
        hash = 47 * hash + (this.razaoSocial != null ? this.razaoSocial.hashCode() : 0);
        hash = 47 * hash + (this.cnpj != null ? this.cnpj.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final MedicalInstitutional other = (MedicalInstitutional) obj;
        if (this.id != other.id && (this.id == null || !this.id.equals(other.id))) {
            return false;
        }
        return true;
    }

}
